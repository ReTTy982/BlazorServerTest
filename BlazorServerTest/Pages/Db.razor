@page "/db"
@using Models;
@using DataHandler;
@inject DatabaseContext dbContext


<form @onsubmit="CreatePerson">
    <h3>Create Person</h3>
    <div style="width: 25%;">
    <div class="form-group">
        <label for="name">Name:</label>
        <input type="text" class="form-control" id="name" @bind="Name">
    </div>
    <div class="form-group">
        <label for="surname">Surname:</label>
        <input type="text" class="form-control" id="surname" @bind="Surname">
    </div>
    <div class="form-group">
        <label for="age">Age:</label>
        <input type="number" class="form-control" id="age" @bind="Age">
    </div>
    <div class="form-group">
        <label for="role">Role:</label>
        <select class="form-control" id="role" @bind="SelectedRole">
            <option value="Teacher">Teacher</option>
            <option value="Student">Student</option>
        </select>
    </div>
    @if (SelectedRole == "Student")
    {
            <div class="form-group">
                <label for="semester">Semester:</label>
                <select class="form-control" id="semester" @bind="Semester">
                    @for (int i = 1; i <= 7; i++)
                    {
                        <option value="@i">@i</option>
                    }
                </select>
            </div>

            <div class="form-group">
                <label for="classes">Classes:</label>
                <select class="form-control" id="classes" @bind="SelectedClass">
                    @foreach (Subjects subject in Enum.GetValues(typeof(Subjects)))
                    {
                        <option value="@subject">@subject.ToString()</option>
                    }
                </select>
                <button @onclick="AddSelectedClass" class="btn btn-primary">Add</button>
            </div>

            <div>
                <h4>Selected Classes:</h4>
                <ul>
                    @foreach (Subjects subject in ClassesList)
                    {
                        <li>
                            @subject.ToString()
                            <button @onclick="() => RemoveSelectedClass(subject)" class="btn btn-danger">Remove</button>
                        </li>
                    }
                </ul>
            </div>


    }
    else if (SelectedRole == "Teacher")
    {
        <div class="form-group">
            <label for="subject">Subject:</label>
            <input type="text" class="form-control" id="subject" @bind="Subject">
        </div>
    }



    <button type="submit" class="btn btn-primary">Create</button>
    </div>
</form>

<div style="display: flex; justify-content: space-between;">
    <h3>Students</h3>
    <h3>Teachers</h3>
</div>



<div style ="display: flex;">
    <div style="flex: 1; margin-right: 20px;">
        @if (students == null)
        {
            <p><em>Cos....</em></p>
        }
        else
        {

            <table class="table table-bordered">
                <thead class="alert-dark">
                    <tr>
                        <th>Name</th>
                        <th>Surname</th>
                        <th>Age</th>
                        <th>Semester</th>
                        <th>Classes</th>
                        <th>Get Json</th>
                        
                    </tr>
                </thead>
                <tbody>
                    @foreach (var student in students)
                    {
                        <tr>
                            <td>@student.Name</td>
                            <td>@student.Surname</td>
                            <td>@student.Age</td>
                            <td>@student.Semester</td>
                            <td>@string.Join(", ", student.Classes)</td>
                            <td>
                                <button @onclick="() => JsonDataStudents(student.Id)" class="btn btn-primary">Get</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
    <div style="flex: 1;">
        @if (teachers == null)
        {
            <p><em>Cos....</em></p>
        }
        else
        {

            <table class="table table-bordered">
                <thead class="alert-dark">
                    <tr>
                        <th>Name</th>
                        <th>Surname</th>
                        <th>Age</th>
                        <th>Subject</th>
                        <th>Get Json</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var teacher in teachers)
                    {
                        <tr>
                            <td>@teacher.Name</td>
                            <td>@teacher.Surname</td>
                            <td>@teacher.Age</td>
                            <td>@teacher.Subject</td>
                            <td>
                                <button @onclick="() => JsonDataTeachers(teacher.Id)" class="btn btn-primary">Get</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

<textarea rows="10" cols="40" readonly>@JsonData</textarea>


<form @onsubmit="CreateEmployee">
    <div class="form-group">
        <label for="name">Name:</label>
        <input type="text" class="form-control" id="name" @bind="Name">
    </div>
    <div class="form-group">
        <label for="surname">Surname:</label>
        <input type="text" class="form-control" id="surname" @bind="Surname">
    </div>
    <div class="form-group">
        <label for="age">Age:</label>
        <input type="number" class="form-control" id="age" @bind="Age">
    </div>
    <div class="form-group">
        <label for="email">Email:</label>
        <input type="text" class="form-control" id="email" @bind="Email">
    </div>
    <button type="submit" class="btn btn-primary">Create</button>
</form>

<button @onclick="ShowAllEmployees" class="btn btn-secondary">Show All Employees</button>

@if (employees != null && employees.Count > 0)
{
    <h4>All Employees:</h4>
    <ul>
        @foreach (var employee in employees)
        {
            <li>@employee.Id @employee.Name @employee.Surname (Age: @employee.Age, Email: @employee.Email)</li>
        }
    </ul>
}

@code {
    private int Id=0;
    private string? Name;
    private string? Surname;
    private int Age;
    private string? Email;
    private List<Employee>? employees;
    DataGenerator generator = new();
    List<Student>? students;
    List<Teacher>? teachers;
    private string? JsonData;
    private string? SelectedRole;
    private string? Subject;
    private int Semester;
    private Subjects SelectedClass;
    private List<Subjects> ClassesList { get; set; } = new List<Subjects>();

    private void CreateEmployee()
    {
        Console.WriteLine(Id);
        Employee employee = new Employee(Id,Name,Surname,Age,Email);

        Console.WriteLine(Id);
        dbContext.Employees.Add(employee);
        Console.WriteLine(Dumper.Dump(employee));
        dbContext.SaveChanges();

    }
    private void ShowAllEmployees()
    {
        employees = dbContext.Employees.ToList();

    }

    private void JsonDataStudents(int targetId)
    {
        var person = students.First(student => student.Id == targetId);
        JsonData = JsonHandler.ClassToJson<Student>(person);
    }

    private void JsonDataTeachers(int targetId)
    {
        var person = teachers.First(teacher => teacher.Id == targetId);
        JsonData =  JsonHandler.ClassToJson<Teacher>(person);
    }

    private void CreatePerson()
    {
        if (SelectedRole == "Student")
        {
            string[] array = ClassesList.ConvertAll(subject => subject.ToString()).ToArray();
            Student student = new(generator.idRange, Name, Surname, Age, Semester,array);
            students.Add(student);
            generator.idRange++;
        }

    }

    protected override async Task OnInitializedAsync()
    {
        SelectedRole = "Student";
        if (students == null)
        {
            var array = await generator.AssignStudentsRoles(2);
            students = array.ToList();

        }
        if (teachers == null)
        {
            var array = await generator.AssignTeachersRoles(2);
            teachers = array.ToList();

        }

    }

    private void AddSelectedClass()
    {
        if (!ClassesList.Contains(SelectedClass))
        {
            ClassesList.Add(SelectedClass);
        }
    }

    private void RemoveSelectedClass(Subjects subject)
    {
        ClassesList.Remove(subject);
    }



}
